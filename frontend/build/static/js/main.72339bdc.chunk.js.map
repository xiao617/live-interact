{"version":3,"sources":["features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/user/userSlice.ts","app/store.ts","serviceWorker.ts","app/hooks.ts","service/nodeService.tsx","index.tsx","pages/MainPage.tsx","pages/CreateRoom.tsx","pages/QuestionRoom.tsx","pages/Dashboard.tsx"],"names":["fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","userSlice","id","score","userLogin","_id","getUser","selectUser","user","store","configureStore","reducer","counter","counterReducer","userReducer","Boolean","window","location","hostname","match","useAppDispatch","useDispatch","useAppSelector","useSelector","NodeService","userName","axios","post","res","console","log","problemList","roomId","this","getRandomKey","owner","questions","room","get","rooms","userId","roomInfo","put","length","randomChars","result","i","charAt","Math","floor","random","ReactDOM","render","StrictMode","exact","path","component","dispatch","Header","Layout","Content","Footer","useState","isModalVisible","setIsModalVisible","inputName","setInputName","inputRoom","setInputRoom","nodeService","hideModal","postUser","then","e","useEffect","style","position","zIndex","width","className","theme","mode","Item","to","pathname","padding","marginTop","margin","minHeight","span","size","placeholder","onChange","target","block","title","visible","onCancel","footer","type","onClick","prefix","UserOutlined","textAlign","roomIdVisiable","setRoomIdVisiable","setProblemList","problemName","setProblemName","choiceName","setChoiceName","choiceList","setChoiceList","newChoice","toString","option","selectedList","theArr","newProblem","question","choices","postRoom","choiceTemplate","choice","map","problem","useParams","TabPane","Tabs","questionAns","setQuestionAns","emptyRoom","setRoomInfo","canResponse","setCanResponse","ind","disabled","getRoom","submitToDB","updateRoom","indChoice","parseInt","push","getRoomInfo","tabIndx","tab","Group","direction","previewTemplate","allOwnerRooms","setAllOwnerRooms","getAllOwnRooms","selectorTemplate","getUserRoom","tabHeader","undefined","roomTemplate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.72339bdc.chunk.js","sourcesContent":["// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport {userBody} from './../../types/typeObject';\nexport interface UserState {\n    name: string;\n    id: string;\n    score: number;\n    status: 'admin' | 'user' | 'visitor';\n}\n  \nconst initialState: UserState = {\n    name: '',\n    id: '',\n    score: 0,\n    status: 'visitor',\n};\n\nexport const userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers:{\n        userLogin: (state,action: PayloadAction<userBody>) => {\n            state.id = action.payload._id??\"\";\n            state.name = action.payload.name;\n            state.status = 'user';\n            state.score = 0;\n            \n        },\n        getUser: (state) => {\n            return {id:state.id,name:state.name,status:state.status,score:state.score};\n        }\n    }\n});\n\nexport const {userLogin,getUser} = userSlice.actions;\nexport const selectUser = (state: RootState) => state.user;\nexport default userSlice.reducer;","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { useReducer } from 'react';\nimport counterReducer from '../features/counter/counterSlice';\nimport userReducer from '../features/user/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    user: userReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios, { AxiosResponse } from 'axios';\nimport { userBody,optionBody,questionBody,roomBody,userState } from '../types/typeObject';\n\nexport class NodeService {\n    async postUser(userName: string){\n        const res = await axios.post('/v1/login',{\n            name: userName,\n            status: 'user',\n            score: 0\n        })\n        console.log(res.data.user);\n        return res.data.user;\n    }\n    async postRoom(problemList: Array<questionBody>, user: userState){\n        const roomId = this.getRandomKey(8);\n        const res = await axios.post('/v1/rooms',{\n            owner: user.id,\n            roomId: roomId,\n            questions: problemList\n        });\n        return res.data.room;\n    }\n    async getRoom(roomId: string)\n    {\n        const res = await axios.get(`/v1/rooms/${roomId}`);\n        \n        return res.data.rooms;\n    }\n    async getAllOwnRooms(user:userState)\n    {\n        const userId = user.id??\"\";\n        const res = await axios.get(`/v1/owner-rooms/${userId}`);\n        return res.data.rooms;\n    }\n    async updateRoom(roomInfo: roomBody)\n    {\n        //console.log(roomInfo);\n        const id = roomInfo._id;\n        const res = await axios.put(`/v1/rooms/${id}`,{\n            questions: roomInfo.questions,\n            _id: id,\n            roomId: roomInfo.roomId,\n            owner: roomInfo.owner\n        })\n        //console.log(res);\n\n    }\n    getRandomKey(length: number){\n        var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var result = '';\n        for ( var i = 0; i < length; i++ ) {\n            result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\n        }\n        return result;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport MainPage from './pages/MainPage';\nimport { MockServer } from './service/MockServer';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport CreateRoom from './pages/CreateRoom';\nimport QuestionRoom from './pages/QuestionRoom';\nimport Dashboard from './pages/Dashboard';\n\nconst environment = process.env.NODE_ENV;\n\nif (environment !== 'production') {\n  MockServer({environment});\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={MainPage}></Route>\n          <Route exact path=\"/create-room\" component={CreateRoom}></Route>\n          <Route path=\"/question-room/:roomId\" component={QuestionRoom}></Route>\n          <Route exact path=\"/dashboard\" component={Dashboard}></Route>\n        </Switch>\n      </BrowserRouter>\n      \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React,{useEffect,useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Layout, Menu, Breadcrumb,Modal, Button,Input,Row,Col} from 'antd';\nimport { userBody,userState } from '../types/typeObject';\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser,userLogin} from './../features/user/userSlice';\nimport { UserOutlined } from '@ant-design/icons';\nimport { NodeService } from '../service/nodeService';\nimport {Link} from \"react-router-dom\";\n\nexport default function MainPage(){\n    const dispatch = useAppDispatch();\n    const user:userState = useAppSelector(selectUser);\n    //const emptyUser = {id:'',name:'',score:0,status:'visitor'} as userBody;\n    //const user:userBody = state.location.state.user ?? emptyUser;\n    const {Header,Content,Footer} = Layout;\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [inputName,setInputName] = useState<string>(\"\");\n    const [inputRoom,setInputRoom] = useState<string>(\"\");\n    const nodeService = new NodeService();\n\n    function checkUserState(){\n        if(user.status === \"visitor\")\n        {\n            setIsModalVisible(true);\n        }\n    }\n    async function hideModal(){\n        setIsModalVisible(false);\n        await nodeService.postUser(inputName).then((e)=>(dispatch(userLogin(e))))\n    }\n    async function sumbitRoom(){\n        window.location.pathname = `/question-room/${inputRoom}`;\n    }\n    useEffect(()=>{\n        checkUserState();\n    }\n    ,[]);\n    return (\n        <Layout>\n            <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"horizontal\">\n                <Menu.Item key=\"1\">{user.name}</Menu.Item>\n                <Link to={{pathname:\"/dashboard\"}}>\n                    <Menu.Item key=\"2\">個人總覽</Menu.Item>\n                </Link>\n                \n            </Menu>\n            </Header>\n            <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\n                <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb>\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n                <Row>\n                    <Col span={8}></Col>\n                    <Col span={8}>Enter Room: \n                        <Input size=\"middle\" placeholder=\"輸入代號\" onChange={(e)=>(setInputRoom(e.target.value))}/>\n                        <Link to={{pathname:\"/question-room/\"+inputRoom}}>\n                            <Button>Go</Button>\n                        </Link>\n                    </Col>\n                    <Col span={8}></Col>\n                </Row>\n                <br />\n                <Row>\n                    <Col span={8}></Col>\n                    <Col span={8}>  \n                        <Link to={{ pathname:\"/create-room\"  }}>\n                            <Button block>\n                                Create Room\n                            </Button>\n                        </Link>\n                    </Col>\n                    <Col span={8}></Col>\n                </Row>\n            </div>\n            <Modal title=\"Login\" \n            visible={isModalVisible} \n            onCancel={hideModal}\n            footer={[\n                <Button key=\"submit\" type=\"primary\" onClick={hideModal}>\n                    Submit\n                </Button>\n            ]}\n            >\n                <Input size=\"middle\" placeholder=\"輸入姓名\" prefix={<UserOutlined />} onChange={(e)=>(setInputName(e.target.value))} />\n            </Modal>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n        </Layout>\n    );\n}","import React,{useEffect,useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Layout, Menu, Breadcrumb,Modal, Button,Input,Row,Col,Card} from 'antd';\nimport { userBody,optionBody,questionBody,roomBody,userState } from '../types/typeObject';\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser,userLogin,getUser} from './../features/user/userSlice';\nimport { UserOutlined } from '@ant-design/icons';\nimport { NodeService } from '../service/nodeService';\nimport { store } from './../app/store';\nimport {Link} from \"react-router-dom\";\n\nexport default function CreateRoom(){\n    const dispatch = useAppDispatch();\n    const user:userState = useAppSelector(selectUser);\n    //const user:userBody = useAppSelector(state => state.user);\n    //const userRedux = dispatch(getUser());\n    //const user:userBody = state.location.state.user;\n    const {Header,Content,Footer} = Layout;\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [roomIdVisiable,setRoomIdVisiable] = useState(\"\");\n    const [problemList,setProblemList] = useState<Array<questionBody>>([]);\n    const [problemName,setProblemName] = useState(\"\");\n    const [choiceName,setChoiceName] = useState(\"\");\n    const [choiceList,setChoiceList] = useState<Array<optionBody>>([]);\n    const [roomId,setRoomId] = useState<string>(\"\");\n    const nodeService = new NodeService();\n    async function createChoice() {\n        const newChoice:optionBody = {id:choiceList.length.toString(),option:choiceName,selectedList:[]};\n        await setChoiceList((theArr)=>([...theArr,newChoice]));\n        setChoiceName(\"\");\n        //console.log(choiceList);\n    }\n    const deleteChoice = () => {\n        setChoiceList([]);\n    }\n    const hideModal = () => {\n        setIsModalVisible(false);\n    }\n    async function submitProblem(){\n        const newProblem:questionBody = {question:problemName,choices:choiceList};\n        await setProblemList((theArr)=>([...theArr,newProblem]));\n        setChoiceList([]);\n        setChoiceName(\"\");\n        setProblemName(\"\");\n        \n    }\n    async function submitRoom(){\n        const res:roomBody = await nodeService.postRoom(problemList,user);\n        setRoomIdVisiable(res.roomId);\n        setIsModalVisible(true);\n        setProblemName(\"\");\n        setProblemList([]);\n        setChoiceList([]);\n        setChoiceName(\"\");\n    }\n    const choiceTemplate = (choice: optionBody) => {\n        return (<div>\n            <p>{choice.option}</p>\n        </div>);\n    }\n    const problemTemplate = (problem: questionBody) => {\n        return (\n            <div>\n                <Card title={problem.question}>\n                {problem.choices.map((e)=>(choiceTemplate(e)))}\n                </Card>\n            </div>\n        );\n    }\n    useEffect(()=>{\n        console.log(user);\n        //console.log(userRedux);\n        \n    }\n    ,[]);\n    return (\n        <Layout>\n            <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"horizontal\" >\n                <Menu.Item key=\"1\">{user.name}</Menu.Item>\n                <Link to={{pathname:\"/dashboard\"}}>\n                    <Menu.Item key=\"2\">個人總覽</Menu.Item>\n                </Link>\n                <Link to={{pathname:\"/\"}}>\n                    <Menu.Item key=\"3\">首頁</Menu.Item>\n                </Link>\n            </Menu>\n            </Header>\n            <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\n                <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb>\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n                \n                <Row>\n                    <Col span={6}>\n                        <Card title=\"已設定清單\">\n                            {problemList.map((e)=>(problemTemplate(e)))}\n                        </Card>\n                    </Col>\n                    <Col span={3}></Col>\n                    <Col span={12}>\n                        <Card title=\"新增題目\">\n                            <p>題目敘述：</p>\n                            <Input size=\"middle\" value={problemName} onChange={(e)=>(setProblemName(e.target.value))} />\n                            <br /><br />\n                            <p>新增選項：</p>\n                            <div>\n                                {choiceList.map((e)=>(choiceTemplate(e)))}\n                            </div>\n                            <Input size=\"middle\" value={choiceName} onChange={(e)=>(setChoiceName(e.target.value))} />\n                            <Button onClick={createChoice}>添加選項</Button>\n                            <Button onClick={deleteChoice}>刪除所有選項</Button>\n                            <Button onClick={submitProblem}>送出題目</Button>\n                            \n                        </Card>\n                        <Button onClick={submitRoom}>送出所有題目設定</Button>\n                    </Col>\n                    <Col span={3}></Col>\n                </Row>\n            </div>\n            \n            <Modal title=\"Room ID\" \n            visible={isModalVisible} \n            onCancel={hideModal}\n            footer={[\n                <Button key=\"submit\" type=\"primary\" onClick={hideModal}>\n                    Close\n                </Button>\n            ]}\n            >\n                <h2>{roomIdVisiable}</h2>\n            </Modal>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n        </Layout>\n    );\n}","import React,{useEffect,useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Layout, Menu, Breadcrumb,Modal, Button,Input,Row,Col,Card,List,Tabs,Radio,Space} from 'antd';\nimport { userBody,optionBody,questionBody,roomBody,paramBody,userState } from '../types/typeObject';\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser,userLogin,getUser} from './../features/user/userSlice';\nimport { UserOutlined } from '@ant-design/icons';\nimport { NodeService } from '../service/nodeService';\nimport { store } from './../app/store';\nimport {Link,useParams } from \"react-router-dom\";\n\nexport default function QuestionRoom(){\n    //let {roomId} = useParams();\n    const roomId:string = useParams<paramBody>()[\"roomId\"];\n    //const  roomId = \"\";\n    const emptyChoice:optionBody = {id:\"\",option:\"\",selectedList:[]};\n    const dispatch = useAppDispatch();\n    //const user:userBody = useAppSelector(selectUser);\n    //const user:userBody = useAppSelector(state => state.user);\n    const user:userState = useAppSelector(selectUser);\n    //const userRedux = dispatch(getUser());\n    //const user:userBody = state.location.state.user;\n    const {Header,Content,Footer} = Layout;\n    const {TabPane} = Tabs;\n    const [questionAns,setQuestionAns] = useState<optionBody>(emptyChoice);\n    const [problemList,setProblemList] = useState<Array<questionBody>>([]);\n    const emptyRoom = {roomId:\"\",questions:[],owner:user.id} as roomBody;\n    const [roomInfo,setRoomInfo] = useState<roomBody>(emptyRoom);\n    const [canResponse,setCanResponse] = useState(false);\n    const nodeService = new NodeService();\n   \n    \n    const previewTemplate = (problem: questionBody,ind:number) => {\n        console.log(problem);\n        const tabIndx = `Q${ind+1}`\n        return (\n            <TabPane tab={tabIndx} key={ind}>\n                <h4>Question: {problem.question}</h4>\n                <Radio.Group onChange={(e)=>(setQuestionAns(e.target.value))}>\n                    <Space direction=\"vertical\">\n                    {problem.choices.map((e,i)=>(choiceTemplate(e,i)))}\n                    </Space>\n                </Radio.Group>\n            </TabPane>\n        );\n    }\n    const choiceTemplate = (choice: optionBody,ind:number) => {\n        return (<Radio value={choice} disabled={canResponse}>\n            {choice.option}\n        </Radio>);\n    }\n    \n    async function getRoomInfo()\n    {\n        await nodeService.getRoom(roomId).then(\n            (e)=>{\n                if(e.length > 0)\n                {\n                    setRoomInfo(e[0]);\n                }\n            }\n        );\n    \n    }\n    async function submitToDB()\n    {\n        await nodeService.updateRoom(roomInfo);\n        setCanResponse(true);\n    }\n    async function submitAns()\n    {\n        const indChoice = parseInt(questionAns.id)??-1;\n        console.log(indChoice);\n        if(indChoice!== -1)\n        {\n            (roomInfo.questions[0].choices)[indChoice].selectedList.push(user);\n            setRoomInfo(roomInfo);\n        }\n        await submitToDB();\n\n        //console.log(questionAns);\n    }\n    useEffect(()=>{\n        console.log(user);\n        console.log(roomId);\n        getRoomInfo();\n        \n        //console.log(userRedux);\n        \n    }\n    ,[]);\n    return (\n        <Layout>\n            <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"horizontal\" >\n                <Menu.Item key=\"1\">{user.name}</Menu.Item>\n                <Link to={{pathname:\"/dashboard\"}}>\n                    <Menu.Item key=\"2\">個人總覽</Menu.Item>\n                </Link>\n                <Link to={{pathname:\"/\"}}>\n                    <Menu.Item key=\"3\">首頁</Menu.Item>\n                </Link>\n            </Menu>\n            </Header>\n            <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\n                <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb>\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n                \n                <Row>\n                    <Col span={6}></Col>\n                    <Col span={3}></Col>\n                    <Col span={12}>\n                        <Tabs>\n                        {roomInfo.questions.map((e,i)=>(previewTemplate(e,i)))}\n                            \n                        </Tabs>\n                        <br />\n                        <Button onClick={submitAns}>Submit</Button>\n                    </Col>\n                    <Col span={3}></Col>\n                </Row>\n            </div>\n            \n            \n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n        </Layout>\n    );\n}","import React,{useEffect,useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Layout, Menu, Breadcrumb,Modal, Button,Input,Row,Col,Card, Tabs,Tag} from 'antd';\nimport { userBody,optionBody,questionBody,roomBody,userState } from '../types/typeObject';\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser,userLogin,getUser} from './../features/user/userSlice';\nimport { UserOutlined } from '@ant-design/icons';\nimport { NodeService } from '../service/nodeService';\nimport { store } from './../app/store';\nimport {Link} from \"react-router-dom\";\n\nexport default function Dashboard(){\n    const dispatch = useAppDispatch();\n    //const user:userBody = useAppSelector(state => state.user);\n    const user:userState = useAppSelector(selectUser);\n    //const userRedux = dispatch(getUser());\n    //const user:userBody = state.location.state.user;\n    const [allOwnerRooms,setAllOwnerRooms] = useState<Array<roomBody>>([]);\n    const {Header,Content,Footer} = Layout;\n    const {TabPane} = Tabs;\n    \n    const nodeService = new NodeService();\n    async function getUserRoom(){\n        await nodeService.getAllOwnRooms(user).then((e)=>(setAllOwnerRooms(e)));\n    }\n    const roomTemplate = (roomInfo:roomBody,ind:number) => {\n        const tabHeader = `Q${ind}`;\n        return (\n            <TabPane tab={tabHeader} key={ind}>\n                <h2>Question: {roomInfo.questions[0].question}</h2>\n                <h3>Answer:</h3>\n                {roomInfo.questions === undefined?\"\":roomInfo.questions[0].choices.map((e,i)=>(choiceTemplate(e,i)))}\n            </TabPane>\n        )\n    }\n    const choiceTemplate = (choice:optionBody,ind:number) =>{\n        return (\n            <div>\n                <h4>{ind+1}) {choice.option}</h4>\n                <h5>Who choice this?</h5>\n                <div>\n                    {choice.selectedList.map((e)=>selectorTemplate(e))}\n                </div>\n            </div>\n        );\n    }\n    const selectorTemplate = (user:userBody) =>{\n        return (\n            <Tag>\n                {user.name}\n            </Tag>\n        );\n    }\n    useEffect(()=>{\n        console.log(user);\n        //console.log(userRedux);\n        getUserRoom()\n    }\n    ,[]);\n    return (\n        <Layout>\n            <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"horizontal\" >\n                <Menu.Item key=\"1\">{user.name}</Menu.Item>\n                <Link to={{pathname:\"/dashboard\"}}>\n                    <Menu.Item key=\"2\">個人總覽</Menu.Item>\n                </Link>\n                <Link to={{pathname:\"/\"}}>\n                    <Menu.Item key=\"3\">首頁</Menu.Item>\n                </Link>\n            </Menu>\n            </Header>\n            <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n                <Breadcrumb.Item>Home</Breadcrumb.Item>\n                <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb>\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n                \n                <Row>\n                    <Col span={6}>\n                        \n                    </Col>\n                    <Col span={3}></Col>\n                    <Col span={12}>\n                        <Tabs>\n                            {allOwnerRooms.map((e,i)=>(roomTemplate(e,i)))}\n                        </Tabs>\n                    </Col>\n                    <Col span={3}></Col>\n                </Row>\n            </div>\n            \n            \n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n        </Layout>\n    );\n}"],"sourceRoot":""}