{"version":3,"sources":["features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/user/userSlice.ts","app/store.ts","serviceWorker.ts","app/hooks.ts","service/nodeService.tsx","index.tsx","pages/MainPage.tsx","pages/CreateRoom.tsx","pages/LoginPage.tsx","pages/QuestionRoom.tsx","pages/Dashboard.tsx"],"names":["fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","userSlice","id","score","userLogin","_id","getUser","selectUser","user","store","configureStore","reducer","counter","counterReducer","userReducer","Boolean","window","location","hostname","match","useAppDispatch","useDispatch","useAppSelector","useSelector","NodeService","userData","axios","post","password","verification_code","res","respn","result","console","log","problemList","roomId","this","getRandomKey","owner","questions","room","get","rooms","userId","roomInfo","put","length","randomChars","i","charAt","Math","floor","random","ReactDOM","render","StrictMode","exact","path","component","Header","Layout","Content","Footer","useState","isModalVisible","setIsModalVisible","setInputName","inputRoom","setInputRoom","hideModal","useEffect","style","position","zIndex","width","className","theme","mode","Item","to","pathname","padding","marginTop","margin","minHeight","span","size","placeholder","onChange","e","target","block","title","visible","onCancel","footer","type","onClick","prefix","UserOutlined","textAlign","roomIdVisiable","setRoomIdVisiable","setProblemList","problemName","setProblemName","choiceName","setChoiceName","choiceList","setChoiceList","nodeService","newChoice","toString","option","selectedList","theArr","newProblem","question","choices","postRoom","choiceTemplate","choice","map","problem","submitUser","postUser","values","openNotification","notification","open","message","description","labelCol","wrapperCol","initialValues","remember","onFinish","onFinishFailed","errorInfo","autoComplete","label","rules","required","Password","offset","htmlType","useParams","TabPane","Tabs","questionAns","setQuestionAns","emptyRoom","setRoomInfo","canResponse","setCanResponse","ind","disabled","getRoom","then","submitToDB","updateRoom","indChoice","parseInt","getRoomInfo","tabIndx","tab","Group","direction","previewTemplate","allOwnerRooms","setAllOwnerRooms","getAllOwnRooms","selectorTemplate","getUserRoom","tabHeader","undefined","roomTemplate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"kOACO,SAASA,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAA0B,SAACC,GAAD,OACnCC,YAAW,kBAAMD,EAAQ,CAAEE,KAAMJ,MAAW,QCMhD,IAUaK,EAAiBC,YAAiB,qBAAD,uCAAuB,WAAON,GAAP,eAAAO,EAAA,sEAC5CR,EAAWC,GADiC,cAC7DQ,EAD6D,yBAG5DA,EAASJ,MAHmD,2CAAvB,uDAMjCK,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAlBiC,CACjCC,MAAO,EACPC,OAAQ,QAkBRC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMJ,OAAS,GAEjBK,UAAW,SAACD,GACVA,EAAMJ,OAAS,GAGjBM,kBAAmB,SAACF,EAAOG,GACzBH,EAAMJ,OAASO,EAAOC,UAK1BC,cAAe,SAACC,GACdA,EACGC,QAAQnB,EAAeoB,SAAS,SAACR,GAChCA,EAAMH,OAAS,aAEhBU,QAAQnB,EAAeqB,WAAW,SAACT,EAAOG,GACzCH,EAAMH,OAAS,OACfG,EAAMJ,OAASO,EAAOC,c,EAK6BZ,EAAakB,QAkBzDlB,G,EAlBAO,U,EAAWE,U,EAAWC,kBAkBtBV,EAAf,SC5DamB,EAAYlB,YAAY,CACnCC,KAAM,OACNC,aAT8B,CAC9BD,KAAM,GACNkB,GAAI,GACJC,MAAO,EACPhB,OAAQ,WAMRC,SAAU,CACRgB,UAAW,SAACd,EAAOG,GAAqC,IAAD,EACrDH,EAAMY,GAAN,UAAWT,EAAOC,QAAQW,WAA1B,QAAiC,GACjCf,EAAMN,KAAOS,EAAOC,QAAQV,KAC5BM,EAAMH,OAAS,OACfG,EAAMa,MAAQ,GAEhBG,QAAS,SAAChB,GACR,MAAO,CAAEY,GAAIZ,EAAMY,GAAIlB,KAAMM,EAAMN,KAAMG,OAAQG,EAAMH,OAAQgB,MAAOb,EAAMa,W,EAK5CF,EAAUD,QACnCO,G,EADEH,U,EAAWE,QACA,SAAChB,GAAD,OAAsBA,EAAMkB,OACvCP,IAAf,QC9BaQ,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,EACTL,KAAMM,K,QCIUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,yFCbtBC,EAAiB,kBAAMC,eACvBC,EAAkDC,I,4CCFlDC,EAAb,+HACE,WAAeC,GAAf,mBAAA7C,EAAA,sEACoB8C,IAAMC,KAAK,YAAa,CACxC3C,KAAMyC,EAASzC,KACf4C,SAAUH,EAASG,SACnBC,kBAAmBJ,EAASI,oBAJhC,UAMoB,OALZC,EADR,QAMS3C,OANT,uBAQU4C,EAAQ,CAACC,QAAQ,EAAMhD,KAAK,IARtC,kBASW+C,GATX,cAWEE,QAAQC,IAAIJ,GACNC,EAAQ,CAACC,QAAQ,EAAKhD,KAAMyC,EAASzC,MAZ7C,kBAaS+C,GAbT,2CADF,oHAgBE,WAAeI,EAAkC3B,GAAjD,iBAAA5B,EAAA,6DACQwD,EAASC,KAAKC,aAAa,GADnC,SAEoBZ,IAAMC,KAAK,YAAa,CACxCY,MAAO/B,EAAKN,GACZkC,OAAQA,EACRI,UAAWL,IALf,cAEQL,EAFR,yBAOSA,EAAIrD,KAAKgE,MAPlB,gDAhBF,qHAyBE,WAAcL,GAAd,eAAAxD,EAAA,sEACoB8C,IAAMgB,IAAN,oBAAuBN,IAD3C,cACQN,EADR,yBAGSA,EAAIrD,KAAKkE,OAHlB,2CAzBF,0HA8BE,WAAqBnC,GAArB,mBAAA5B,EAAA,6DACQgE,EADR,UACiBpC,EAAKN,UADtB,QAC4B,GAD5B,SAEoBwB,IAAMgB,IAAN,0BAA6BE,IAFjD,cAEQd,EAFR,yBAGSA,EAAIrD,KAAKkE,OAHlB,2CA9BF,sHAmCE,WAAiBE,GAAjB,eAAAjE,EAAA,6DAEQsB,EAAK2C,EAASxC,IAFtB,SAGoBqB,IAAMoB,IAAN,oBAAuB5C,GAAM,CAC7CsC,UAAWK,EAASL,UACpBnC,IAAKH,EACLkC,OAAQS,EAAST,OACjBG,MAAOM,EAASN,QAPpB,yDAnCF,iFA+CE,SAAaQ,GAGX,IAFA,IAAIC,EAAc,iEACdhB,EAAS,GACJiB,EAAI,EAAGA,EAAIF,EAAQE,IAC1BjB,GAAUgB,EAAYE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAAYD,SAEtE,OAAOf,MArDX,K,sHCkBAsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU/C,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgD,OAAK,EAACC,KAAK,IAAIC,UChBjB,WACIvC,IAAjB,IACMZ,EAAkBc,EAAef,GAG/BqD,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OALQ,EAMWC,oBAAS,GANpB,mBAM1BC,EAN0B,KAMVC,EANU,OAOCF,mBAAiB,IAPlB,mBAOfG,GAPe,aAQCH,mBAAiB,IARlB,mBAQ1BI,EAR0B,KAQfC,EARe,cAgBlBC,IAhBkB,2EAgBjC,sBAAA1F,EAAA,sDACEsF,GAAkB,GADpB,4CAhBiC,sBAkCjC,OAzBoB,IAAI1C,EAcxB+C,qBAAU,WAXY,YAAhB/D,EAAKrB,QACP+E,GAAkB,KAYnB,IAUD,eAAC,IAAD,WACE,eAACN,EAAD,CAAQY,MAAO,CAAEC,SAAU,QAASC,OAAQ,EAAGC,MAAO,QAAtD,UACE,qBAAKC,UAAU,SACf,eAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAxB,UACE,cAAC,IAAKC,KAAN,UAAoBvE,EAAKxB,MAAV,KACf,cAAC,IAAD,CAAMgG,GAAI,CAAEC,SAAU,cAAtB,SACE,cAAC,IAAKF,KAAN,sCAAe,aAIrB,eAACjB,EAAD,CAASc,UAAU,cAAcJ,MAAO,CAAEU,QAAS,SAAUC,UAAW,IAAxE,UACE,eAAC,IAAD,CAAYX,MAAO,CAAEY,OAAQ,UAA7B,UACE,cAAC,IAAWL,KAAZ,mBACA,cAAC,IAAWA,KAAZ,qBAEF,sBAAKH,UAAU,yBAAyBJ,MAAO,CAAEU,QAAS,GAAIG,UAAW,KAAzE,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKC,KAAM,IACX,eAAC,IAAD,CAAKA,KAAM,EAAX,wBAEE,cAAC,IAAD,CACEC,KAAK,SACLC,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAOrB,EAAaqB,EAAEC,OAAOzG,UAEzC,cAAC,IAAD,CAAM8F,GAAI,CAAEC,SAAU,kBAAoBb,GAA1C,SACE,cAAC,IAAD,sBAGJ,cAAC,IAAD,CAAKkB,KAAM,OAEb,uBACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAKA,KAAM,IACX,cAAC,IAAD,CAAKA,KAAM,EAAX,SACE,cAAC,IAAD,CAAMN,GAAI,CAAEC,SAAU,gBAAtB,SACE,cAAC,IAAD,CAAQW,OAAK,EAAb,6BAGJ,cAAC,IAAD,CAAKN,KAAM,UAGf,cAAC,IAAD,CACEO,MAAM,QACNC,QAAS7B,EACT8B,SAAUzB,EACV0B,OAAQ,CACN,cAAC,IAAD,CAAqBC,KAAK,UAAUC,QAAS5B,EAA7C,mBAAY,WALhB,SAWE,cAAC,IAAD,CACEiB,KAAK,SACLC,YAAY,2BACZW,OAAQ,cAACC,EAAA,EAAD,IACRX,SAAU,SAACC,GAAD,OAAOvB,EAAauB,EAAEC,OAAOzG,eAI7C,cAAC6E,EAAD,CAAQS,MAAO,CAAE6B,UAAW,UAA5B,iCD/EI,cAAC,IAAD,CAAO5C,OAAK,EAACC,KAAK,eAAeC,UEhB5B,WACIvC,IAAjB,IACMZ,EAAkBc,EAAef,GAI/BqD,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OANU,EAOSC,oBAAS,GAPlB,mBAO5BC,EAP4B,KAOZC,EAPY,OAQSF,mBAAS,IARlB,mBAQ5BsC,EAR4B,KAQZC,EARY,OASGvC,mBAA8B,IATjC,mBAS5B7B,EAT4B,KASfqE,EATe,OAUGxC,mBAAS,IAVZ,mBAU5ByC,EAV4B,KAUfC,EAVe,OAWC1C,mBAAS,IAXV,mBAW5B2C,EAX4B,KAWhBC,EAXgB,OAYC5C,mBAA4B,IAZ7B,mBAY5B6C,EAZ4B,KAYhBC,EAZgB,OAaP9C,mBAAiB,IAbV,mBAc7B+C,GAd6B,UAcf,IAAIvF,GAdW,4CAenC,4BAAA5C,EAAA,6DACQoI,EAAwB,CAC5B9G,GAAI2G,EAAW9D,OAAOkE,WACtBC,OAAQP,EACRQ,aAAc,IAJlB,SAMQL,GAAc,SAACM,GAAD,4BAAgBA,GAAhB,CAAwBJ,OAN9C,OAOEJ,EAAc,IAPhB,4CAfmC,sBAyBnC,IAGMtC,EAAY,WAChBJ,GAAkB,IA7Be,4CA+BnC,4BAAAtF,EAAA,6DACQyI,EAA2B,CAAEC,SAAUb,EAAac,QAASV,GADrE,SAEQL,GAAe,SAACY,GAAD,4BAAgBA,GAAhB,CAAwBC,OAF/C,OAGEP,EAAc,IACdF,EAAc,IACdF,EAAe,IALjB,4CA/BmC,oEAsCnC,4BAAA9H,EAAA,sEAC8BmI,EAAYS,SAASrF,EAAa3B,GADhE,OACQsB,EADR,OAEEyE,EAAkBzE,EAAIM,QACtB8B,GAAkB,GAClBwC,EAAe,IACfF,EAAe,IACfM,EAAc,IACdF,EAAc,IAPhB,4CAtCmC,sBA+CnC,IAAMa,GAAiB,SAACC,GACtB,OACE,8BACE,4BAAIA,EAAOR,YAejB,OAJA3C,qBAAU,WACRtC,QAAQC,IAAI1B,KAEX,IAED,eAAC,IAAD,WACE,eAACoD,EAAD,CAAQY,MAAO,CAAEC,SAAU,QAASC,OAAQ,EAAGC,MAAO,QAAtD,UACE,qBAAKC,UAAU,SACf,eAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAxB,UACE,cAAC,IAAKC,KAAN,UAAoBvE,EAAKxB,MAAV,KACf,cAAC,IAAD,CAAMgG,GAAI,CAAEC,SAAU,cAAtB,SACE,cAAC,IAAKF,KAAN,sCAAe,OAEjB,cAAC,IAAD,CAAMC,GAAI,CAAEC,SAAU,KAAtB,SACE,cAAC,IAAKF,KAAN,0BAAe,aAIrB,eAACjB,EAAD,CAASc,UAAU,cAAcJ,MAAO,CAAEU,QAAS,SAAUC,UAAW,IAAxE,UACE,eAAC,IAAD,CAAYX,MAAO,CAAEY,OAAQ,UAA7B,UACE,cAAC,IAAWL,KAAZ,mBACA,cAAC,IAAWA,KAAZ,qBAEF,qBAAKH,UAAU,yBAAyBJ,MAAO,CAAEU,QAAS,GAAIG,UAAW,KAAzE,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKC,KAAM,EAAX,SACE,cAAC,IAAD,CAAMO,MAAM,iCAAZ,SAAqB1D,EAAYwF,KAAI,SAACjC,GAAD,OAjCxBkC,EAiC+ClC,EA/BpE,8BACE,cAAC,IAAD,CAAMG,MAAO+B,EAAQN,SAArB,SAAgCM,EAAQL,QAAQI,KAAI,SAACjC,GAAD,OAAO+B,GAAe/B,UAHxD,IAACkC,SAmCf,cAAC,IAAD,CAAKtC,KAAM,IACX,eAAC,IAAD,CAAKA,KAAM,GAAX,UACE,eAAC,IAAD,CAAMO,MAAM,2BAAZ,UACE,+DACA,cAAC,IAAD,CACEN,KAAK,SACLrG,MAAOuH,EACPhB,SAAU,SAACC,GAAD,OAAOgB,EAAehB,EAAEC,OAAOzG,UAE3C,uBACA,uBACA,+DACA,8BAAM2H,EAAWc,KAAI,SAACjC,GAAD,OAAO+B,GAAe/B,QAC3C,cAAC,IAAD,CACEH,KAAK,SACLrG,MAAOyH,EACPlB,SAAU,SAACC,GAAD,OAAOkB,EAAclB,EAAEC,OAAOzG,UAE1C,cAAC,IAAD,CAAQgH,QA3Ga,2CA2GrB,sCACA,cAAC,IAAD,CAAQA,QAnFD,WACnBY,EAAc,KAkFF,kDACA,cAAC,IAAD,CAAQZ,QA7Ga,2CA6GrB,yCAEF,cAAC,IAAD,CAAQA,QA/Ge,4CA+GvB,iEAEF,cAAC,IAAD,CAAKZ,KAAM,SAIf,cAAC,IAAD,CACEO,MAAM,UACNC,QAAS7B,EACT8B,SAAUzB,EACV0B,OAAQ,CACN,cAAC,IAAD,CAAqBC,KAAK,UAAUC,QAAS5B,EAA7C,kBAAY,WALhB,SAUE,6BAAKgC,SAGT,cAACvC,EAAD,CAAQS,MAAO,CAAE6B,UAAW,UAA5B,iCFjHI,cAAC,IAAD,CAAO5C,OAAK,EAACC,KAAK,SAASC,UGlBtB,WAAqB,IAI1BC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAJS,EAKUC,oBAAS,GALnB,gCAMAA,mBAAiB,KANjB,gCAOAA,mBAAiB,KAPjB,mBAQ5B+C,GAR4B,UAQd,IAAIvF,GARU,SAWnBqG,EAXmB,8EAWlC,WAA0BpG,GAA1B,eAAA7C,EAAA,sEACoBmI,EAAYe,SAASrG,GADzC,cACQK,EADR,yBAESA,GAFT,4CAXkC,kEAkBlC,WAAwBiG,GAAxB,SAAAnJ,EAAA,sEACoBiJ,EAAWE,GAD/B,QAEoB,IAFpB,OAES/F,QAELC,QAAQC,IAAI,SACZ8F,KAIA/F,QAAQC,IAAI,YAThB,4CAlBkC,sBAelCqC,qBAAU,cACP,IAgBH,IAGMyD,EAAmB,WACvBC,IAAaC,KAAK,CAChBC,QAAS,2BACTC,YACE,2EACFlC,QAAS,WACPjE,QAAQC,IAAI,6BAKlB,OACE,eAAC,IAAD,WACE,eAAC0B,EAAD,CAAQY,MAAO,CAAEC,SAAU,QAASC,OAAQ,EAAGC,MAAO,QAAtD,UACE,qBAAKC,UAAU,SACf,eAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAxB,UACE,cAAC,IAAKC,KAAN,GAAe,KACf,cAAC,IAAD,CAAMC,GAAI,CAAEC,SAAU,cAAtB,SACE,cAAC,IAAKF,KAAN,sCAAe,aAIrB,eAACjB,EAAD,CAASc,UAAU,cAAcJ,MAAO,CAAEU,QAAS,SAAUC,UAAW,IAAxE,UACA,eAAC,IAAD,CAAYX,MAAO,CAAEY,OAAQ,UAA7B,UACI,cAAC,IAAWL,KAAZ,mBACA,cAAC,IAAWA,KAAZ,qBAEF,8BACA,eAAC,IAAD,CACF/F,KAAK,QACLqJ,SAAU,CAAE/C,KAAM,GAClBgD,WAAY,CAAEhD,KAAM,GACpBiD,cAAe,CAAEC,UAAU,GAC3BC,SApE8B,4CAqE9BC,eArCmB,SAACC,GACtB1G,QAAQC,IAAI,UAAWyG,IAqCrBC,aAAa,MAPX,UASF,cAAC,IAAK7D,KAAN,CACE8D,MAAM,WACN7J,KAAK,OACL8J,MAAO,CAAC,CAAEC,UAAU,EAAMZ,QAAS,gCAHrC,SAKE,cAAC,IAAD,MAGF,cAAC,IAAKpD,KAAN,CACE8D,MAAM,WACN7J,KAAK,WACL8J,MAAO,CAAC,CAAEC,UAAU,EAAMZ,QAAS,gCAHrC,SAKE,cAAC,IAAMa,SAAP,MAGF,cAAC,IAAKjE,KAAN,CACE8D,MAAM,oBACN7J,KAAK,oBACL8J,MAAO,CAAC,CAAEC,UAAU,EAAMZ,QAAS,yCAHrC,SAKE,cAAC,IAAD,MAEF,cAAC,IAAKpD,KAAN,CAAWuD,WAAY,CAAEW,OAAQ,GAAI3D,KAAM,IAA3C,SACE,cAAC,IAAD,CAAQW,KAAK,QAAQiD,SAAS,SAA9B,wCAOF,cAACnF,EAAD,CAAQS,MAAO,CAAE6B,UAAW,UAA5B,iCHpFI,cAAC,IAAD,CAAO3C,KAAK,yBAAyBC,UIGhC,WAEb,IAAMvB,EAAiB+G,cAAS,OAM1B3I,GAHWY,IAGOE,EAAef,IAG/BqD,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OACjBqF,EAAYC,IAAZD,QAZ6B,EAaCpF,mBATN,CAAE9D,GAAI,GAAIgH,OAAQ,GAAIC,aAAc,KAJ/B,mBAa9BmC,EAb8B,KAajBC,EAbiB,OAcCvF,mBAA8B,IAd/B,mBAe/BwF,GAf+B,UAenB,CAAEpH,OAAQ,GAAII,UAAW,GAAID,MAAO/B,EAAKN,KAftB,EAgBL8D,mBAAmBwF,GAhBd,mBAgB9B3G,EAhB8B,KAgBpB4G,EAhBoB,OAiBCzF,oBAAS,GAjBV,mBAiB9B0F,EAjB8B,KAiBjBC,EAjBiB,KAkB/B5C,EAAc,IAAIvF,EAclBiG,EAAiB,SAACC,EAAoBkC,GAC1C,OACE,cAAC,IAAD,CAAO1K,MAAOwI,EAAQmC,SAAUH,EAAhC,SACGhC,EAAOR,UAnCuB,4CAwCrC,sBAAAtI,EAAA,sEACQmI,EAAY+C,QAAQ1H,GAAQ2H,MAAK,SAACrE,GAClCA,EAAE3C,OAAS,GACb0G,EAAY/D,EAAE,OAHpB,4CAxCqC,+BA+CtBsE,IA/CsB,2EA+CrC,sBAAApL,EAAA,sEACQmI,EAAYkD,WAAWpH,GAD/B,OAEE8G,GAAe,GAFjB,4CA/CqC,kEAmDrC,8BAAA/K,EAAA,6DACQsL,EADR,UACoBC,SAASb,EAAYpJ,WADzC,SACiD,EAC/C+B,QAAQC,IAAIgI,IACO,IAAfA,GAEFT,EAAY5G,GALhB,SAOQmH,IAPR,4CAnDqC,sBAqErC,OAPAzF,qBAAU,WACRtC,QAAQC,IAAI1B,GACZyB,QAAQC,IAAIE,GAhEuB,mCAiEnCgI,KAGC,IAED,eAAC,IAAD,WACE,eAACxG,EAAD,CAAQY,MAAO,CAAEC,SAAU,QAASC,OAAQ,EAAGC,MAAO,QAAtD,UACE,qBAAKC,UAAU,SACf,eAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAxB,UACE,cAAC,IAAKC,KAAN,UAAoBvE,EAAKxB,MAAV,KACf,cAAC,IAAD,CAAMgG,GAAI,CAAEC,SAAU,cAAtB,SACE,cAAC,IAAKF,KAAN,sCAAe,OAEjB,cAAC,IAAD,CAAMC,GAAI,CAAEC,SAAU,KAAtB,SACE,cAAC,IAAKF,KAAN,0BAAe,aAIrB,eAACjB,EAAD,CAASc,UAAU,cAAcJ,MAAO,CAAEU,QAAS,SAAUC,UAAW,IAAxE,UACE,eAAC,IAAD,CAAYX,MAAO,CAAEY,OAAQ,UAA7B,UACE,cAAC,IAAWL,KAAZ,mBACA,cAAC,IAAWA,KAAZ,qBAEF,qBAAKH,UAAU,yBAAyBJ,MAAO,CAAEU,QAAS,GAAIG,UAAW,KAAzE,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKC,KAAM,IACX,cAAC,IAAD,CAAKA,KAAM,IACX,eAAC,IAAD,CAAKA,KAAM,GAAX,UACE,cAAC,IAAD,UAAOzC,EAASL,UAAUmF,KAAI,SAACjC,EAAGzC,GAAJ,OAzElB,SAAC2E,EAAuBgC,GAC9C3H,QAAQC,IAAI0F,GACZ,IAAMyC,EAAO,WAAOT,EAAM,GAC1B,OACE,eAACR,EAAD,CAASkB,IAAKD,EAAd,UACE,4CAAezC,EAAQN,YACvB,cAAC,IAAMiD,MAAP,CAAa9E,SAAU,SAACC,GAAD,OAAO6D,EAAe7D,EAAEC,OAAOzG,QAAtD,SACE,cAAC,IAAD,CAAOsL,UAAU,WAAjB,SAA6B5C,EAAQL,QAAQI,KAAI,SAACjC,EAAGzC,GAAJ,OAAUwE,EAAe/B,EAAGzC,YAHrD2G,GAqEoBa,CAAgB/E,EAAGzC,QAC3D,uBACA,cAAC,IAAD,CAAQiD,QA/FiB,2CA+FG2D,SAAUH,EAAtC,uBAIF,cAAC,IAAD,CAAKpE,KAAM,YAIjB,cAACvB,EAAD,CAAQS,MAAO,CAAE6B,UAAW,UAA5B,iCJzGI,cAAC,IAAD,CAAO5C,OAAK,EAACC,KAAK,aAAaC,UKnB1B,WACIvC,IAAjB,IAEMZ,EAAkBc,EAAef,GAHL,EAMQyD,mBAA0B,IANlC,mBAM3B0G,EAN2B,KAMZC,EANY,KAO1B/G,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OACjBqF,EAAYC,IAAZD,QAEFrC,EAAc,IAAIvF,EAVU,4CAWlC,sBAAA5C,EAAA,sEACQmI,EAAY6D,eAAepK,GAAMuJ,MAAK,SAACrE,GAAD,OAAOiF,EAAiBjF,MADtE,4CAXkC,sBAclC,IAYM+B,EAAiB,SAACC,EAAoBkC,GAC1C,OACE,gCACE,+BACGA,EAAM,EADT,KACclC,EAAOR,UAErB,kDACA,8BAAMQ,EAAOP,aAAaQ,KAAI,SAACjC,GAAD,OAAOmF,EAAiBnF,YAItDmF,EAAmB,SAACrK,GACxB,OAAO,cAAC,IAAD,UAAMA,EAAKxB,QAOpB,OALAuF,qBAAU,WACRtC,QAAQC,IAAI1B,GAzCoB,mCA2ChCsK,KACC,IAED,eAAC,IAAD,WACE,eAAClH,EAAD,CAAQY,MAAO,CAAEC,SAAU,QAASC,OAAQ,EAAGC,MAAO,QAAtD,UACE,qBAAKC,UAAU,SACf,eAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAxB,UACE,cAAC,IAAKC,KAAN,UAAoBvE,EAAKxB,MAAV,KACf,cAAC,IAAD,CAAMgG,GAAI,CAAEC,SAAU,cAAtB,SACE,cAAC,IAAKF,KAAN,sCAAe,OAEjB,cAAC,IAAD,CAAMC,GAAI,CAAEC,SAAU,KAAtB,SACE,cAAC,IAAKF,KAAN,0BAAe,aAIrB,eAACjB,EAAD,CAASc,UAAU,cAAcJ,MAAO,CAAEU,QAAS,SAAUC,UAAW,IAAxE,UACE,eAAC,IAAD,CAAYX,MAAO,CAAEY,OAAQ,UAA7B,UACE,cAAC,IAAWL,KAAZ,mBACA,cAAC,IAAWA,KAAZ,qBAEF,qBAAKH,UAAU,yBAAyBJ,MAAO,CAAEU,QAAS,GAAIG,UAAW,KAAzE,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKC,KAAM,IACX,cAAC,IAAD,CAAKA,KAAM,IACX,cAAC,IAAD,CAAKA,KAAM,GAAX,SACE,cAAC,IAAD,UAAOoF,EAAc/C,KAAI,SAACjC,EAAGzC,GAAJ,OAvDhB,SAACJ,EAAoB+G,GACxC,IAAMmB,EAAS,WAAOnB,GACtB,OACE,eAACR,EAAD,CAASkB,IAAKS,EAAd,UACE,4CAAelI,EAASL,UAAU,GAAG8E,YACrC,8CACwB0D,IAAvBnI,EAASL,UACN,GACAK,EAASL,UAAU,GAAG+E,QAAQI,KAAI,SAACjC,EAAGzC,GAAJ,OAAUwE,EAAe/B,EAAGzC,QALtC2G,GAoDaqB,CAAavF,EAAGzC,UAErD,cAAC,IAAD,CAAKqC,KAAM,YAIjB,cAACvB,EAAD,CAAQS,MAAO,CAAE6B,UAAW,UAA5B,0CLnDJ6E,SAASC,eAAe,SHiGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAACwB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNzJ,QAAQyJ,MAAMA,EAAMvD,c","file":"static/js/main.9a0df8f8.chunk.js","sourcesContent":["// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  )\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../../app/store'\nimport { fetchCount } from './counterAPI'\n\nexport interface CounterState {\n  value: number\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {\n  const response = await fetchCount(amount)\n  // The value we return becomes the `fulfilled` action payload\n  return response.data\n})\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.value += action.payload\n      })\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState())\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount))\n    }\n  }\n\nexport default counterSlice.reducer\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../../app/store'\nimport { userBody } from './../../types/typeObject'\nexport interface UserState {\n  name: string\n  id: string\n  score: number\n  status: 'admin' | 'user' | 'visitor'\n}\n\nconst initialState: UserState = {\n  name: '',\n  id: '',\n  score: 0,\n  status: 'visitor',\n}\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    userLogin: (state, action: PayloadAction<userBody>) => {\n      state.id = action.payload._id ?? ''\n      state.name = action.payload.name\n      state.status = 'user'\n      state.score = 0\n    },\n    getUser: (state) => {\n      return { id: state.id, name: state.name, status: state.status, score: state.score }\n    },\n  },\n})\n\nexport const { userLogin, getUser } = userSlice.actions\nexport const selectUser = (state: RootState) => state.user\nexport default userSlice.reducer\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { useReducer } from 'react'\nimport counterReducer from '../features/counter/counterSlice'\nimport userReducer from '../features/user/userSlice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    user: userReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import axios, { AxiosResponse } from 'axios'\nimport { userBody, optionBody, questionBody, roomBody, userState,responseBody } from '../types/typeObject'\n\nexport class NodeService {\n  async postUser(userData: userBody) {\n    const res = await axios.post('/v1/login', {\n      name: userData.name,\n      password: userData.password,\n      verification_code: userData.verification_code,\n    })\n    if(res.status === 205)\n    {\n      const respn = {result: false,name:\"\"} as responseBody\n      return respn\n    }\n    console.log(res)\n    const respn = {result: true,name: userData.name } as responseBody\n    return respn\n  }\n  async postRoom(problemList: Array<questionBody>, user: userState) {\n    const roomId = this.getRandomKey(8)\n    const res = await axios.post('/v1/rooms', {\n      owner: user.id,\n      roomId: roomId,\n      questions: problemList,\n    })\n    return res.data.room\n  }\n  async getRoom(roomId: string) {\n    const res = await axios.get(`/v1/rooms/${roomId}`)\n\n    return res.data.rooms\n  }\n  async getAllOwnRooms(user: userState) {\n    const userId = user.id ?? ''\n    const res = await axios.get(`/v1/owner-rooms/${userId}`)\n    return res.data.rooms\n  }\n  async updateRoom(roomInfo: roomBody) {\n    //console.log(roomInfo);\n    const id = roomInfo._id\n    const res = await axios.put(`/v1/rooms/${id}`, {\n      questions: roomInfo.questions,\n      _id: id,\n      roomId: roomInfo.roomId,\n      owner: roomInfo.owner,\n    })\n    //console.log(res);\n  }\n  \n  getRandomKey(length: number) {\n    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    var result = ''\n    for (var i = 0; i < length; i++) {\n      result += randomChars.charAt(Math.floor(Math.random() * randomChars.length))\n    }\n    return result\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport MainPage from './pages/MainPage'\nimport { MockServer } from './service/MockServer'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport CreateRoom from './pages/CreateRoom'\nimport QuestionRoom from './pages/QuestionRoom'\nimport Dashboard from './pages/Dashboard'\nimport LoginPage from './pages/LoginPage'\n\nconst environment = process.env.NODE_ENV\n\nif (environment !== 'production') {\n  MockServer({ environment })\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={MainPage}></Route>\n          <Route exact path=\"/create-room\" component={CreateRoom}></Route>\n          <Route exact path=\"/login\" component={LoginPage}></Route>\n          <Route path=\"/question-room/:roomId\" component={QuestionRoom}></Route>\n          <Route exact path=\"/dashboard\" component={Dashboard}></Route>\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport { Layout, Menu, Breadcrumb, Modal, Button, Input, Row, Col, Form } from 'antd'\nimport { userBody, userState } from '../types/typeObject'\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { Link } from 'react-router-dom'\n\nexport default function MainPage() {\n  const dispatch = useAppDispatch()\n  const user: userState = useAppSelector(selectUser)\n  //const emptyUser = {id:'',name:'',score:0,status:'visitor'} as userBody;\n  //const user:userBody = state.location.state.user ?? emptyUser;\n  const { Header, Content, Footer } = Layout\n  const [isModalVisible, setIsModalVisible] = useState(false)\n  const [inputName, setInputName] = useState<string>('')\n  const [inputRoom, setInputRoom] = useState<string>('')\n  const nodeService = new NodeService()\n\n  function checkUserState() {\n    if (user.status === 'visitor') {\n      setIsModalVisible(true)\n    }\n  }\n  async function hideModal() {\n    setIsModalVisible(false)\n    //await nodeService.postUser(inputName).then((e) => dispatch(userLogin(e)))\n  }\n  async function sumbitRoom() {\n    window.location.pathname = `/question-room/${inputRoom}`\n  }\n  useEffect(() => {\n    checkUserState()\n  }, [])\n\n  const onFinish = (values: any) => {\n    console.log('Success:', values)\n  }\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo)\n  }\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\">{user.name}</Menu.Item>\n          <Link to={{ pathname: '/dashboard' }}>\n            <Menu.Item key=\"2\">個人總覽</Menu.Item>\n          </Link>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n          <Row>\n            <Col span={8}></Col>\n            <Col span={8}>\n              Enter Room:\n              <Input\n                size=\"middle\"\n                placeholder=\"輸入代號\"\n                onChange={(e) => setInputRoom(e.target.value)}\n              />\n              <Link to={{ pathname: '/question-room/' + inputRoom }}>\n                <Button>Go</Button>\n              </Link>\n            </Col>\n            <Col span={8}></Col>\n          </Row>\n          <br />\n          <Row>\n            <Col span={8}></Col>\n            <Col span={8}>\n              <Link to={{ pathname: '/create-room' }}>\n                <Button block>Create Room</Button>\n              </Link>\n            </Col>\n            <Col span={8}></Col>\n          </Row>\n        </div>\n        <Modal\n          title=\"Login\"\n          visible={isModalVisible}\n          onCancel={hideModal}\n          footer={[\n            <Button key=\"submit\" type=\"primary\" onClick={hideModal}>\n              Submit\n            </Button>,\n          ]}\n        >\n          \n          <Input\n            size=\"middle\"\n            placeholder=\"輸入姓名\"\n            prefix={<UserOutlined />}\n            onChange={(e) => setInputName(e.target.value)}\n          />\n        </Modal>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport { Layout, Menu, Breadcrumb, Modal, Button, Input, Row, Col, Card } from 'antd'\nimport { userBody, optionBody, questionBody, roomBody, userState } from '../types/typeObject'\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin, getUser } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { store } from './../app/store'\nimport { Link } from 'react-router-dom'\n\nexport default function CreateRoom() {\n  const dispatch = useAppDispatch()\n  const user: userState = useAppSelector(selectUser)\n  //const user:userBody = useAppSelector(state => state.user);\n  //const userRedux = dispatch(getUser());\n  //const user:userBody = state.location.state.user;\n  const { Header, Content, Footer } = Layout\n  const [isModalVisible, setIsModalVisible] = useState(false)\n  const [roomIdVisiable, setRoomIdVisiable] = useState('')\n  const [problemList, setProblemList] = useState<Array<questionBody>>([])\n  const [problemName, setProblemName] = useState('')\n  const [choiceName, setChoiceName] = useState('')\n  const [choiceList, setChoiceList] = useState<Array<optionBody>>([])\n  const [roomId, setRoomId] = useState<string>('')\n  const nodeService = new NodeService()\n  async function createChoice() {\n    const newChoice: optionBody = {\n      id: choiceList.length.toString(),\n      option: choiceName,\n      selectedList: [],\n    }\n    await setChoiceList((theArr) => [...theArr, newChoice])\n    setChoiceName('')\n    //console.log(choiceList);\n  }\n  const deleteChoice = () => {\n    setChoiceList([])\n  }\n  const hideModal = () => {\n    setIsModalVisible(false)\n  }\n  async function submitProblem() {\n    const newProblem: questionBody = { question: problemName, choices: choiceList }\n    await setProblemList((theArr) => [...theArr, newProblem])\n    setChoiceList([])\n    setChoiceName('')\n    setProblemName('')\n  }\n  async function submitRoom() {\n    const res: roomBody = await nodeService.postRoom(problemList, user)\n    setRoomIdVisiable(res.roomId)\n    setIsModalVisible(true)\n    setProblemName('')\n    setProblemList([])\n    setChoiceList([])\n    setChoiceName('')\n  }\n  const choiceTemplate = (choice: optionBody) => {\n    return (\n      <div>\n        <p>{choice.option}</p>\n      </div>\n    )\n  }\n  const problemTemplate = (problem: questionBody) => {\n    return (\n      <div>\n        <Card title={problem.question}>{problem.choices.map((e) => choiceTemplate(e))}</Card>\n      </div>\n    )\n  }\n  useEffect(() => {\n    console.log(user)\n    //console.log(userRedux);\n  }, [])\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\">{user.name}</Menu.Item>\n          <Link to={{ pathname: '/dashboard' }}>\n            <Menu.Item key=\"2\">個人總覽</Menu.Item>\n          </Link>\n          <Link to={{ pathname: '/' }}>\n            <Menu.Item key=\"3\">首頁</Menu.Item>\n          </Link>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n          <Row>\n            <Col span={6}>\n              <Card title=\"已設定清單\">{problemList.map((e) => problemTemplate(e))}</Card>\n            </Col>\n            <Col span={3}></Col>\n            <Col span={12}>\n              <Card title=\"新增題目\">\n                <p>題目敘述：</p>\n                <Input\n                  size=\"middle\"\n                  value={problemName}\n                  onChange={(e) => setProblemName(e.target.value)}\n                />\n                <br />\n                <br />\n                <p>新增選項：</p>\n                <div>{choiceList.map((e) => choiceTemplate(e))}</div>\n                <Input\n                  size=\"middle\"\n                  value={choiceName}\n                  onChange={(e) => setChoiceName(e.target.value)}\n                />\n                <Button onClick={createChoice}>添加選項</Button>\n                <Button onClick={deleteChoice}>刪除所有選項</Button>\n                <Button onClick={submitProblem}>送出題目</Button>\n              </Card>\n              <Button onClick={submitRoom}>送出所有題目設定</Button>\n            </Col>\n            <Col span={3}></Col>\n          </Row>\n        </div>\n\n        <Modal\n          title=\"Room ID\"\n          visible={isModalVisible}\n          onCancel={hideModal}\n          footer={[\n            <Button key=\"submit\" type=\"primary\" onClick={hideModal}>\n              Close\n            </Button>,\n          ]}\n        >\n          <h2>{roomIdVisiable}</h2>\n        </Modal>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport { Layout, Menu, Breadcrumb, Modal, Button, Input, Row, Col, Form,notification } from 'antd'\nimport { userBody, userState } from '../types/typeObject'\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { Link } from 'react-router-dom'\n\nexport default function LoginPage() {\n\n  //const emptyUser = {id:'',name:'',score:0,status:'visitor'} as userBody;\n  //const user:userBody = state.location.state.user ?? emptyUser;\n  const { Header, Content, Footer } = Layout\n  const [isModalVisible, setIsModalVisible] = useState(false)\n  const [inputName, setInputName] = useState<string>('')\n  const [inputRoom, setInputRoom] = useState<string>('')\n  const nodeService = new NodeService()\n\n  \n  async function submitUser(userData: userBody) {\n    const res = await nodeService.postUser(userData);\n    return res;\n  }\n  useEffect(() => {\n  }, [])\n\n  async function onFinish(values: userBody){\n    const res = await submitUser(values);\n    if(res.result === false)//register or login error\n    {\n      console.log('Fail ');\n      openNotification();\n    }\n    else\n    {\n      console.log('Success ');\n    }\n    \n  }\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  }\n  const openNotification = () => {\n    notification.open({\n      message: '登入失敗',\n      description:\n        '帳號註冊失敗或是密碼有誤',\n      onClick: () => {\n        console.log('Notification Clicked!');\n      },\n    });\n  };\n\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\"></Menu.Item>\n          <Link to={{ pathname: '/dashboard' }}>\n            <Menu.Item key=\"2\">個人總覽</Menu.Item>\n          </Link>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div>\n        <Form\n      name=\"basic\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n      initialValues={{ remember: true }}\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n      autoComplete=\"off\"\n    >\n      <Form.Item\n        label=\"Username\"\n        name=\"name\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Verification Code\"\n        name=\"verification_code\"\n        rules={[{ required: true, message: 'Please input your verification code!' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item wrapperCol={{ offset: 10, span: 16 }}>\n        <Button type=\"ghost\" htmlType=\"submit\">\n          Login / Register\n        </Button>\n      </Form.Item>\n    </Form>\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport {\n  Layout,\n  Menu,\n  Breadcrumb,\n  Modal,\n  Button,\n  Input,\n  Row,\n  Col,\n  Card,\n  List,\n  Tabs,\n  Radio,\n  Space,\n} from 'antd'\nimport {\n  userBody,\n  optionBody,\n  questionBody,\n  roomBody,\n  paramBody,\n  userState,\n} from '../types/typeObject'\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin, getUser } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { store } from './../app/store'\nimport { Link, useParams } from 'react-router-dom'\n\nexport default function QuestionRoom() {\n  //let {roomId} = useParams();\n  const roomId: string = useParams<paramBody>()['roomId']\n  //const  roomId = \"\";\n  const emptyChoice: optionBody = { id: '', option: '', selectedList: [] }\n  const dispatch = useAppDispatch()\n  //const user:userBody = useAppSelector(selectUser);\n  //const user:userBody = useAppSelector(state => state.user);\n  const user: userState = useAppSelector(selectUser)\n  //const userRedux = dispatch(getUser());\n  //const user:userBody = state.location.state.user;\n  const { Header, Content, Footer } = Layout\n  const { TabPane } = Tabs\n  const [questionAns, setQuestionAns] = useState<optionBody>(emptyChoice)\n  const [problemList, setProblemList] = useState<Array<questionBody>>([])\n  const emptyRoom = { roomId: '', questions: [], owner: user.id } as roomBody\n  const [roomInfo, setRoomInfo] = useState<roomBody>(emptyRoom)\n  const [canResponse, setCanResponse] = useState(false)\n  const nodeService = new NodeService()\n\n  const previewTemplate = (problem: questionBody, ind: number) => {\n    console.log(problem)\n    const tabIndx = `Q${ind + 1}`\n    return (\n      <TabPane tab={tabIndx} key={ind}>\n        <h4>Question: {problem.question}</h4>\n        <Radio.Group onChange={(e) => setQuestionAns(e.target.value)}>\n          <Space direction=\"vertical\">{problem.choices.map((e, i) => choiceTemplate(e, i))}</Space>\n        </Radio.Group>\n      </TabPane>\n    )\n  }\n  const choiceTemplate = (choice: optionBody, ind: number) => {\n    return (\n      <Radio value={choice} disabled={canResponse}>\n        {choice.option}\n      </Radio>\n    )\n  }\n\n  async function getRoomInfo() {\n    await nodeService.getRoom(roomId).then((e) => {\n      if (e.length > 0) {\n        setRoomInfo(e[0])\n      }\n    })\n  }\n  async function submitToDB() {\n    await nodeService.updateRoom(roomInfo)\n    setCanResponse(true)\n  }\n  async function submitAns() {\n    const indChoice = parseInt(questionAns.id) ?? -1\n    console.log(indChoice)\n    if (indChoice !== -1) {\n      //roomInfo.questions[0].choices[indChoice].selectedList.push(user)\n      setRoomInfo(roomInfo)\n    }\n    await submitToDB()\n\n    //console.log(questionAns);\n  }\n  useEffect(() => {\n    console.log(user)\n    console.log(roomId)\n    getRoomInfo()\n\n    //console.log(userRedux);\n  }, [])\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\">{user.name}</Menu.Item>\n          <Link to={{ pathname: '/dashboard' }}>\n            <Menu.Item key=\"2\">個人總覽</Menu.Item>\n          </Link>\n          <Link to={{ pathname: '/' }}>\n            <Menu.Item key=\"3\">首頁</Menu.Item>\n          </Link>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n          <Row>\n            <Col span={6}></Col>\n            <Col span={3}></Col>\n            <Col span={12}>\n              <Tabs>{roomInfo.questions.map((e, i) => previewTemplate(e, i))}</Tabs>\n              <br />\n              <Button onClick={submitAns} disabled={canResponse}>\n                Submit\n              </Button>\n            </Col>\n            <Col span={3}></Col>\n          </Row>\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport { Layout, Menu, Breadcrumb, Modal, Button, Input, Row, Col, Card, Tabs, Tag } from 'antd'\nimport { userBody, optionBody, questionBody, roomBody, userState } from '../types/typeObject'\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin, getUser } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { store } from './../app/store'\nimport { Link } from 'react-router-dom'\n\nexport default function Dashboard() {\n  const dispatch = useAppDispatch()\n  //const user:userBody = useAppSelector(state => state.user);\n  const user: userState = useAppSelector(selectUser)\n  //const userRedux = dispatch(getUser());\n  //const user:userBody = state.location.state.user;\n  const [allOwnerRooms, setAllOwnerRooms] = useState<Array<roomBody>>([])\n  const { Header, Content, Footer } = Layout\n  const { TabPane } = Tabs\n\n  const nodeService = new NodeService()\n  async function getUserRoom() {\n    await nodeService.getAllOwnRooms(user).then((e) => setAllOwnerRooms(e))\n  }\n  const roomTemplate = (roomInfo: roomBody, ind: number) => {\n    const tabHeader = `Q${ind}`\n    return (\n      <TabPane tab={tabHeader} key={ind}>\n        <h2>Question: {roomInfo.questions[0].question}</h2>\n        <h3>Answer:</h3>\n        {roomInfo.questions === undefined\n          ? ''\n          : roomInfo.questions[0].choices.map((e, i) => choiceTemplate(e, i))}\n      </TabPane>\n    )\n  }\n  const choiceTemplate = (choice: optionBody, ind: number) => {\n    return (\n      <div>\n        <h4>\n          {ind + 1}) {choice.option}\n        </h4>\n        <h5>Who choice this?</h5>\n        <div>{choice.selectedList.map((e) => selectorTemplate(e))}</div>\n      </div>\n    )\n  }\n  const selectorTemplate = (user: userBody) => {\n    return <Tag>{user.name}</Tag>\n  }\n  useEffect(() => {\n    console.log(user)\n    //console.log(userRedux);\n    getUserRoom()\n  }, [])\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\">{user.name}</Menu.Item>\n          <Link to={{ pathname: '/dashboard' }}>\n            <Menu.Item key=\"2\">個人總覽</Menu.Item>\n          </Link>\n          <Link to={{ pathname: '/' }}>\n            <Menu.Item key=\"3\">首頁</Menu.Item>\n          </Link>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n          <Row>\n            <Col span={6}></Col>\n            <Col span={3}></Col>\n            <Col span={12}>\n              <Tabs>{allOwnerRooms.map((e, i) => roomTemplate(e, i))}</Tabs>\n            </Col>\n            <Col span={3}></Col>\n          </Row>\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n"],"sourceRoot":""}