{"version":3,"sources":["features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/user/userSlice.ts","app/store.ts","serviceWorker.ts","service/nodeService.tsx","index.tsx","pages/MainPage.tsx","pages/CreateRoom.tsx","pages/LoginPage.tsx","pages/QuestionRoom.tsx","pages/ControlRoom.tsx","pages/Dashboard.tsx"],"names":["fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","userSlice","id","score","userLogin","_id","getUser","store","configureStore","reducer","counter","counterReducer","user","userReducer","Boolean","window","location","hostname","match","NodeService","domain_url","userData","axios","post","this","password","verification_code","res","respn","result","console","log","problemList","userid","roomName","roomPass","roomId","getRandomKey","roomPassword","owner","questions","room","get","rooms","userId","roomInfo","put","length","randomChars","i","charAt","Math","floor","random","ReactDOM","render","StrictMode","exact","path","component","username","sessionStorage","getItem","Header","Layout","Content","Footer","useState","inputRoom","setInputRoom","useEffect","pathname","style","position","zIndex","width","className","theme","mode","Item","to","onClick","clear","padding","marginTop","margin","minHeight","span","size","placeholder","onChange","e","target","block","textAlign","isModalVisible","setIsModalVisible","roomIdVisiable","setRoomIdVisiable","setProblemList","problemName","setProblemName","choiceName","setChoiceName","choiceList","setChoiceList","ansValue","setAnsValue","setRoomName","setRoomPass","selectQuestion","setSelectQuestion","questionId","setQuestionId","nodeService","newChoice","toString","option","isAnswer","selectedList","theArr","hideModal","newProblem","question","choices","postRoom","choiceTemplate","choice","title","selectionMode","selection","onSelectionChange","dataKey","headerStyle","field","header","undefined","filter","Password","Group","onChangeAnswer","direction","map","visible","onCancel","footer","type","submitUser","postUser","values","openNotification","setItem","notification","open","message","description","labelCol","wrapperCol","initialValues","remember","onFinish","onFinishFailed","errorInfo","autoComplete","label","rules","required","offset","htmlType","useParams","TabPane","Tabs","questionAns","setQuestionAns","emptyRoom","setRoomInfo","canResponse","setCanResponse","ind","disabled","getRoom","then","submitToDB","updateRoom","indChoice","parseInt","getRoomInfo","problem","tabIndx","tab","previewTemplate","socket","io","on","msg","allOwnerRooms","setAllOwnerRooms","selectRoom","setSelectRoom","getAllOwnRooms","getUserRoom","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5934612d.chunk.js","sourcesContent":["// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  )\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../../app/store'\nimport { fetchCount } from './counterAPI'\n\nexport interface CounterState {\n  value: number\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {\n  const response = await fetchCount(amount)\n  // The value we return becomes the `fulfilled` action payload\n  return response.data\n})\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.value += action.payload\n      })\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState())\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount))\n    }\n  }\n\nexport default counterSlice.reducer\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../../app/store'\nimport { userBody } from './../../types/typeObject'\nexport interface UserState {\n  name: string\n  id: string\n  score: number\n  status: 'admin' | 'user' | 'visitor'\n}\n\nconst initialState: UserState = {\n  name: '',\n  id: '',\n  score: 0,\n  status: 'visitor',\n}\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    userLogin: (state, action: PayloadAction<userBody>) => {\n      state.id = action.payload._id ?? ''\n      state.name = action.payload.name\n      state.status = 'user'\n      state.score = 0\n    },\n    getUser: (state) => {\n      return { id: state.id, name: state.name, status: state.status, score: state.score }\n    },\n  },\n})\n\nexport const { userLogin, getUser } = userSlice.actions\nexport const selectUser = (state: RootState) => state.user\nexport default userSlice.reducer\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport { useReducer } from 'react'\nimport counterReducer from '../features/counter/counterSlice'\nimport userReducer from '../features/user/userSlice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    user: userReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import axios, { AxiosResponse } from 'axios'\nimport { userBody, optionBody, questionBody, roomBody, userState,responseBody } from '../types/typeObject'\n\nexport class NodeService {\n  domain_url = 'http://localhost:8888'\n  async postUser(userData: userBody) {\n    const res = await axios.post(this.domain_url+'/v1/login', {\n      name: userData.name,\n      password: userData.password,\n      verification_code: userData.verification_code,\n    })\n    if(res.status === 204)\n    {\n      const respn = {result: false,name:\"\",_id:\"\"} as responseBody\n      return respn\n    }\n    console.log(res)\n    const respn = {result: true,name: userData.name,_id:res.data.user._id } as responseBody\n    return respn\n  }\n  async postRoom(problemList: Array<questionBody>, userid: string,roomName: string,roomPass:string) {\n    const roomId = this.getRandomKey(8)\n    const res = await axios.post(this.domain_url+'/v1/rooms', {\n      roomName: roomName,\n      roomPassword: roomPass,\n      owner: userid,\n      roomId: roomId,\n      questions: problemList,\n    })\n    return res.data.room\n  }\n  async getRoom(roomId: string) {\n    const res = await axios.get(`${this.domain_url}/v1/rooms/${roomId}`)\n\n    return res.data.rooms\n  }\n  async getAllOwnRooms(userId: string) {\n    const res = await axios.get(`${this.domain_url}/v1/owner-rooms/${userId}`)\n    return res.data.rooms\n  }\n  async updateRoom(roomInfo: roomBody) {\n    //console.log(roomInfo);\n    const id = roomInfo._id\n    const res = await axios.put(`${this.domain_url}/v1/rooms/${id}`, {\n      questions: roomInfo.questions,\n      _id: id,\n      roomId: roomInfo.roomId,\n      owner: roomInfo.owner,\n    })\n    //console.log(res);\n  }\n  \n  getRandomKey(length: number) {\n    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    var result = ''\n    for (var i = 0; i < length; i++) {\n      result += randomChars.charAt(Math.floor(Math.random() * randomChars.length))\n    }\n    return result\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport MainPage from './pages/MainPage'\nimport { MockServer } from './service/MockServer'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport CreateRoom from './pages/CreateRoom'\nimport QuestionRoom from './pages/QuestionRoom'\nimport Dashboard from './pages/Dashboard'\nimport LoginPage from './pages/LoginPage'\nimport ControlRoom from './pages/ControlRoom'\n\nconst environment = process.env.NODE_ENV\n\n// if (environment !== 'production') {\n//   MockServer({ environment })\n// }\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={MainPage}></Route>\n          <Route exact path=\"/create-room\" component={CreateRoom}></Route>\n          <Route exact path=\"/login\" component={LoginPage}></Route>\n          <Route path=\"/question-room/:roomId\" component={QuestionRoom}></Route>\n          <Route path=\"/control-room/:roomId\" component={ControlRoom}></Route>\n          <Route exact path=\"/dashboard\" component={Dashboard}></Route>\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport { Layout, Menu, Breadcrumb, Modal, Button, Input, Row, Col, Form } from 'antd'\nimport { userBody, userState } from '../types/typeObject'\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { Link } from 'react-router-dom'\n\nexport default function MainPage() {\n  // const dispatch = useAppDispatch()\n  // const user: userState = useAppSelector(selectUser)\n  //const emptyUser = {id:'',name:'',score:0,status:'visitor'} as userBody;\n  //const user:userBody = state.location.state.user ?? emptyUser;\n  const username = sessionStorage.getItem('username') ?? \"\";\n  const userid = sessionStorage.getItem('userid') ?? \"\";\n  const { Header, Content, Footer } = Layout;\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [inputName, setInputName] = useState<string>('');\n  const [inputRoom, setInputRoom] = useState<string>('');\n  const nodeService = new NodeService()\n\n  function checkUserState() {\n    if (username === null) {\n      window.location.pathname = '/login';\n    }\n  }\n  // async function hideModal() {\n  //   setIsModalVisible(false)\n  //   //await nodeService.postUser(inputName).then((e) => dispatch(userLogin(e)))\n  // }\n  async function sumbitRoom() {\n    window.location.pathname = `/question-room/${inputRoom}`\n  }\n  useEffect(() => {\n    checkUserState()\n  }, [])\n\n  const onFinish = (values: any) => {\n    console.log('Success:', values)\n  }\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo)\n  }\n  const onLogout = () => {\n    sessionStorage.clear();\n    console.log('Logout !');\n    window.location.pathname = '/login';\n  }\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\">{username}</Menu.Item>\n          <Link to={{ pathname: '/dashboard' }}>\n            <Menu.Item key=\"2\">個人總覽</Menu.Item>\n          </Link>\n          <Menu.Item key=\"3\" onClick={onLogout}>Logout</Menu.Item>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n          <Row>\n            <Col span={8}></Col>\n            <Col span={8}>\n              Enter Room:\n              <Input\n                size=\"middle\"\n                placeholder=\"輸入代號\"\n                onChange={(e) => setInputRoom(e.target.value)}\n              />\n              <Link to={{ pathname: '/question-room/' + inputRoom }}>\n                <Button>Go</Button>\n              </Link>\n            </Col>\n            <Col span={8}></Col>\n          </Row>\n          <br />\n          <Row>\n            <Col span={8}></Col>\n            <Col span={8}>\n              <Link to={{ pathname: '/create-room' }}>\n                <Button block>Create Room</Button>\n              </Link>\n            </Col>\n            <Col span={8}></Col>\n          </Row>\n        </div>\n        \n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport { Layout, Menu, Breadcrumb, Modal, Button, Input, Row, Col, Card,Form,Switch, Radio,Space,Table } from 'antd'\nimport { userBody, optionBody, questionBody, roomBody, userState } from '../types/typeObject'\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin, getUser } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { store } from './../app/store'\nimport { Link } from 'react-router-dom'\nimport 'primeicons/primeicons.css';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.css';\nimport 'primeflex/primeflex.css';\nimport { DataTable } from 'primereact/datatable';\nimport {Column} from 'primereact/column';\n\nexport default function CreateRoom() {\n  // const dispatch = useAppDispatch()\n  // const user: userState = useAppSelector(selectUser)\n  //const user:userBody = useAppSelector(state => state.user);\n  //const userRedux = dispatch(getUser());\n  //const user:userBody = state.location.state.user;\n  const username = sessionStorage.getItem('username') ?? \"\";\n  const userid = sessionStorage.getItem('userid') ?? \"\";\n  const { Header, Content, Footer } = Layout\n  const [isModalVisible, setIsModalVisible] = useState(false)\n  const [roomIdVisiable, setRoomIdVisiable] = useState('')\n  const [problemList, setProblemList] = useState<Array<questionBody>>([])\n  const [problemName, setProblemName] = useState('')\n  const [choiceName, setChoiceName] = useState('')\n  const [choiceList, setChoiceList] = useState<Array<optionBody>>([])\n  const [ansValue, setAnsValue] = useState<optionBody>()\n  const [roomId, setRoomId] = useState<string>('')\n  const [roomName,setRoomName] = useState<string>('')\n  const [roomPass,setRoomPass] = useState<string>('')\n  const [selectQuestion,setSelectQuestion] = useState<questionBody>()\n  const [questionId,setQuestionId] = useState<number>(0)\n  const nodeService = new NodeService()\n  \n  async function createChoice() {\n    const newChoice: optionBody = {\n      id: choiceList.length.toString(),\n      option: choiceName,\n      isAnswer: false,\n      selectedList: [],\n    }\n    await setChoiceList((theArr) => [...theArr, newChoice])\n    setChoiceName('')\n    //console.log(choiceList);\n  }\n  function checkUserState() {\n    if (username === null) {\n      window.location.pathname = '/login';\n    }\n  }\n  const onLogout = () => {\n    sessionStorage.clear();\n    console.log('Logout !');\n    window.location.pathname = '/login';\n  }\n  const deleteChoice = () => {\n    setChoiceList([])\n  }\n  const hideModal = () => {\n    setIsModalVisible(false)\n  }\n  async function submitProblem() {\n    const newProblem: questionBody = { id:questionId.toString(),question: problemName, choices: choiceList }\n    await setProblemList((theArr) => [...theArr, newProblem])\n    setQuestionId(questionId+1)\n    setChoiceList([])\n    setChoiceName('')\n    setProblemName('')\n  }\n  const onChangeAnswer = (e: optionBody) =>{\n    if(ansValue !== undefined)\n    {\n      ansValue.isAnswer = false\n    }\n    e.isAnswer = true\n    setAnsValue(e)\n    // console.log(choiceList)\n  }\n  async function submitRoom() {\n    console.log(ansValue)\n    const res: roomBody = await nodeService.postRoom(problemList, userid,roomName,roomPass)\n    setRoomIdVisiable(res.roomId)\n    setIsModalVisible(true)\n    setProblemName('')\n    setProblemList([])\n    setChoiceList([])\n    setChoiceName('')\n  }\n  const choiceTemplate = (choice: optionBody) => {\n    return (\n      \n        <Radio value={choice}>{choice.option}</Radio>\n      \n    )\n  }\n  const problemTemplate = (problem: questionBody) => {\n    return (\n      <div>\n        <Card title={problem.question}>{problem.choices.map((e) => choiceTemplate(e))}</Card>\n      </div>\n    )\n  }\n  const deleteQuestion = () => {\n    console.log(selectQuestion)\n    if(selectQuestion !== undefined)\n    {\n      setProblemList(problemList.filter((e)=>(e.id!==selectQuestion.id)))\n    }\n    \n  }\n  useEffect(() => {\n    console.log(username)\n    \n    checkUserState()\n    //console.log(userRedux);\n  }, [])\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\">{username}</Menu.Item>\n          <Link to={{ pathname: '/dashboard' }}>\n            <Menu.Item key=\"2\">個人總覽</Menu.Item>\n          </Link>\n          <Link to={{ pathname: '/' }}>\n            <Menu.Item key=\"3\">首頁</Menu.Item>\n          </Link>\n          <Menu.Item key=\"4\" onClick={onLogout}>Logout</Menu.Item>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n          <Row>\n            <Col span={6}>\n              <Card title=\"已設定題目\">\n                <DataTable value={problemList} selectionMode=\"radiobutton\" selection={selectQuestion} onSelectionChange={(e)=> setSelectQuestion(e.value)} dataKey=\"id\">\n                  <Column selectionMode=\"single\" headerStyle={{width: '3em'}}></Column>\n                  <Column field=\"question\" header=\"題目\" ></Column>\n                </DataTable>\n                <Button onClick={deleteQuestion}>刪除題目</Button>\n              </Card>\n            </Col>\n            <Col span={2}></Col>\n            <Col span={12}>\n              <Row>\n              <Col span={24}>\n              <Card title=\"房間設置\">\n              <p>房間名稱：</p>\n                <Input\n                  size=\"middle\"\n                  value={roomName}\n                  onChange={(e) => setRoomName(e.target.value)}\n                />\n                <p>房間密碼：</p>\n                <Input.Password\n                  size=\"middle\"\n                  value={roomPass}\n                  onChange={(e) => setRoomPass(e.target.value)}\n                />\n              </Card>\n              </Col>\n              </Row>\n              <Row>\n                <Col span={24}>\n              <Card title=\"新增題目\">\n                <p>題目敘述：</p>\n                <Input\n                  size=\"middle\"\n                  value={problemName}\n                  onChange={(e) => setProblemName(e.target.value)}\n                />\n                <br />\n                <br />\n                <p>新增選項：</p>\n                <div>\n                  <Radio.Group onChange={(e)=>onChangeAnswer(e.target.value)} value={ansValue}>\n                    <Space direction=\"vertical\">\n                  {choiceList.map((e) => choiceTemplate(e))}\n                    </Space>\n                  </Radio.Group>\n                </div>\n                <br />\n                <Input\n                  size=\"middle\"\n                  value={choiceName}\n                  onChange={(e) => setChoiceName(e.target.value)}\n                />\n                <Button onClick={createChoice}>添加選項</Button>\n                <Button onClick={deleteChoice}>刪除所有選項</Button>\n                <Button onClick={submitProblem}>送出題目</Button>\n              </Card>\n              </Col>\n              <Button onClick={submitRoom}>送出房間設定</Button>\n              </Row>\n              </Col>\n              <Col span={4}></Col>\n          </Row>\n        </div>\n        <Modal\n          title=\"Room ID\"\n          visible={isModalVisible}\n          onCancel={hideModal}\n          footer={[\n            <Button key=\"submit\" type=\"primary\" onClick={hideModal}>\n              Close\n            </Button>,\n          ]}\n        >\n          <h2>{roomIdVisiable}</h2>\n        </Modal>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport { Layout, Menu, Breadcrumb, Modal, Button, Input, Row, Col, Form,notification } from 'antd'\nimport { userBody, userState } from '../types/typeObject'\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { Link } from 'react-router-dom'\n\nexport default function LoginPage() {\n\n  //const emptyUser = {id:'',name:'',score:0,status:'visitor'} as userBody;\n  //const user:userBody = state.location.state.user ?? emptyUser;\n  const { Header, Content, Footer } = Layout\n  const [isModalVisible, setIsModalVisible] = useState(false)\n  const [inputName, setInputName] = useState<string>('')\n  const [inputRoom, setInputRoom] = useState<string>('')\n  const nodeService = new NodeService()\n\n  \n  async function submitUser(userData: userBody) {\n    const res = await nodeService.postUser(userData);\n    return res;\n  }\n  useEffect(() => {\n    \n  }, [])\n\n  async function onFinish(values: userBody){\n    const res = await submitUser(values);\n    console.log(res,\"login~~~\");\n    if(res.result === false)//register or login error\n    {\n      console.log('Fail ');\n      openNotification();\n    }\n    else\n    {\n      sessionStorage.setItem('username',values.name)\n      sessionStorage.setItem('userid',res._id)\n      window.location.pathname = '/'\n      console.log('Success ');\n    }\n    \n  }\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  }\n  const openNotification = () => {\n    notification.open({\n      message: '登入失敗',\n      description:\n        '帳號註冊失敗或是密碼有誤',\n      onClick: () => {\n        console.log('Notification Clicked!');\n      },\n    });\n  };\n\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\"></Menu.Item>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div>\n        <Form\n      name=\"basic\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n      initialValues={{ remember: true }}\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n      autoComplete=\"off\"\n    >\n      <Form.Item\n        label=\"Username\"\n        name=\"name\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Verification Code\"\n        name=\"verification_code\"\n        rules={[{ required: true, message: 'Please input your verification code!' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item wrapperCol={{ offset: 10, span: 16 }}>\n        <Button type=\"ghost\" htmlType=\"submit\">\n          Login / Register\n        </Button>\n      </Form.Item>\n    </Form>\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport {\n  Layout,\n  Menu,\n  Breadcrumb,\n  Modal,\n  Button,\n  Input,\n  Row,\n  Col,\n  Card,\n  List,\n  Tabs,\n  Radio,\n  Space,\n} from 'antd'\nimport {\n  userBody,\n  optionBody,\n  questionBody,\n  roomBody,\n  paramBody,\n  userState,\n} from '../types/typeObject'\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin, getUser } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { store } from './../app/store'\nimport { Link, useParams } from 'react-router-dom'\n\nexport default function QuestionRoom() {\n  //let {roomId} = useParams();\n  const roomId: string = useParams<paramBody>()['roomId']\n  //const  roomId = \"\";\n  const emptyChoice: optionBody = { id: '', option: '', isAnswer:false,selectedList: [] }\n  // const dispatch = useAppDispatch()\n  // //const user:userBody = useAppSelector(selectUser);\n  // //const user:userBody = useAppSelector(state => state.user);\n  // const user: userState = useAppSelector(selectUser)\n  //const userRedux = dispatch(getUser());\n  //const user:userBody = state.location.state.user;\n  const username = sessionStorage.getItem('username') ?? \"\";\n  const userid = sessionStorage.getItem('userid') ?? \"\";\n  const { Header, Content, Footer } = Layout\n  const { TabPane } = Tabs\n  const [questionAns, setQuestionAns] = useState<optionBody>(emptyChoice)\n  const [problemList, setProblemList] = useState<Array<questionBody>>([])\n  const emptyRoom = { roomId: '', questions: [], owner: userid ,roomName:\"\",roomPassword:\"\"} as roomBody\n  const [roomInfo, setRoomInfo] = useState<roomBody>(emptyRoom)\n  const [canResponse, setCanResponse] = useState(false)\n  const nodeService = new NodeService()\n\n  function checkUserState() {\n    if (username === null) {\n      window.location.pathname = '/login';\n    }\n  }\n  const previewTemplate = (problem: questionBody, ind: number) => {\n    console.log(problem)\n    const tabIndx = `Q${ind + 1}`\n    return (\n      <TabPane tab={tabIndx} key={ind}>\n        <h4>Question: {problem.question}</h4>\n        <Radio.Group onChange={(e) => setQuestionAns(e.target.value)}>\n          <Space direction=\"vertical\">{problem.choices.map((e, i) => choiceTemplate(e, i))}</Space>\n        </Radio.Group>\n      </TabPane>\n    )\n  }\n  const choiceTemplate = (choice: optionBody, ind: number) => {\n    return (\n      <Radio value={choice} disabled={canResponse}>\n        {choice.option}\n      </Radio>\n    )\n  }\n  const onLogout = () => {\n    sessionStorage.clear();\n    console.log('Logout !');\n    window.location.pathname = '/login';\n  }\n  async function getRoomInfo() {\n    await nodeService.getRoom(roomId).then((e) => {\n      if (e.length > 0) {\n        setRoomInfo(e[0])\n      }\n    })\n  }\n  async function submitToDB() {\n    await nodeService.updateRoom(roomInfo)\n    setCanResponse(true)\n  }\n  async function submitAns() {\n    const indChoice = parseInt(questionAns.id) ?? -1\n    console.log(indChoice)\n    if (indChoice !== -1) {\n      //roomInfo.questions[0].choices[indChoice].selectedList.push(user)\n      setRoomInfo(roomInfo)\n    }\n    await submitToDB()\n\n    //console.log(questionAns);\n  }\n  useEffect(() => {\n    console.log(username)\n    console.log(roomId)\n    checkUserState()\n    getRoomInfo()\n\n    //console.log(userRedux);\n  }, [])\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\">{username}</Menu.Item>\n          <Link to={{ pathname: '/dashboard' }}>\n            <Menu.Item key=\"2\">個人總覽</Menu.Item>\n          </Link>\n          <Link to={{ pathname: '/' }}>\n            <Menu.Item key=\"3\">首頁</Menu.Item>\n          </Link>\n          <Menu.Item key=\"4\" onClick={onLogout}>Logout</Menu.Item>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n          <Row>\n            <Col span={6}></Col>\n            <Col span={3}></Col>\n            <Col span={12}>\n              <Tabs>{roomInfo.questions.map((e, i) => previewTemplate(e, i))}</Tabs>\n              <br />\n              <Button onClick={submitAns} disabled={canResponse}>\n                Submit\n              </Button>\n            </Col>\n            <Col span={3}></Col>\n          </Row>\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport {\n  Layout,\n  Menu,\n  Breadcrumb,\n  Modal,\n  Button,\n  Input,\n  Row,\n  Col,\n  Card,\n  List,\n  Tabs,\n  Radio,\n  Space,\n} from 'antd'\nimport {\n  userBody,\n  optionBody,\n  questionBody,\n  roomBody,\n  paramBody,\n  userState,\n} from '../types/typeObject'\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin, getUser } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { store } from './../app/store'\nimport { Link, useParams } from 'react-router-dom'\nimport {io} from 'socket.io-client'\n\nexport default function ControlRoom() {\n  //let {roomId} = useParams();\n  const roomId: string = useParams<paramBody>()['roomId']\n  //const  roomId = \"\";\n  const emptyChoice: optionBody = { id: '', option: '', isAnswer:false,selectedList: [] }\n  // const dispatch = useAppDispatch()\n  // //const user:userBody = useAppSelector(selectUser);\n  // //const user:userBody = useAppSelector(state => state.user);\n  // const user: userState = useAppSelector(selectUser)\n  //const userRedux = dispatch(getUser());\n  //const user:userBody = state.location.state.user;\n  const socket = io(\"127.0.0.1:8880\",{\n      \n  })\n  const username = sessionStorage.getItem('username') ?? \"\";\n  const userid = sessionStorage.getItem('userid') ?? \"\";\n  const { Header, Content, Footer } = Layout\n  const { TabPane } = Tabs\n  const [questionAns, setQuestionAns] = useState<optionBody>(emptyChoice)\n  const [problemList, setProblemList] = useState<Array<questionBody>>([])\n  const emptyRoom = { roomId: '', questions: [], owner: userid ,roomName:\"\",roomPassword:\"\"} as roomBody\n  const [roomInfo, setRoomInfo] = useState<roomBody>(emptyRoom)\n  const [canResponse, setCanResponse] = useState(false)\n  const nodeService = new NodeService()\n\n  function checkUserState() {\n    if (username === null) {\n      window.location.pathname = '/login';\n    }\n  }\n  const previewTemplate = (problem: questionBody, ind: number) => {\n    console.log(problem)\n    const tabIndx = `Q${ind + 1}`\n    return (\n      <TabPane tab={tabIndx} key={ind}>\n        <h4>Question: {problem.question}</h4>\n        <Radio.Group onChange={(e) => setQuestionAns(e.target.value)}>\n          <Space direction=\"vertical\">{problem.choices.map((e, i) => choiceTemplate(e, i))}</Space>\n        </Radio.Group>\n      </TabPane>\n    )\n  }\n  const choiceTemplate = (choice: optionBody, ind: number) => {\n    return (\n      <Radio value={choice} disabled={canResponse}>\n        {choice.option}\n      </Radio>\n    )\n  }\n  const onLogout = () => {\n    sessionStorage.clear();\n    console.log('Logout !');\n    window.location.pathname = '/login';\n  }\n  async function getRoomInfo() {\n    await nodeService.getRoom(roomId).then((e) => {\n      if (e.length > 0) {\n        setRoomInfo(e[0])\n      }\n    })\n  }\n  async function submitToDB() {\n    await nodeService.updateRoom(roomInfo)\n    setCanResponse(true)\n  }\n  async function submitAns() {\n    const indChoice = parseInt(questionAns.id) ?? -1\n    console.log(indChoice)\n    if (indChoice !== -1) {\n      //roomInfo.questions[0].choices[indChoice].selectedList.push(user)\n      setRoomInfo(roomInfo)\n    }\n    await submitToDB()\n\n    //console.log(questionAns);\n  }\n  useEffect(() => {\n    console.log(username)\n    console.log(roomId)\n    socket.on(\"connect\",()=>{});\n    socket.on(\"hello\",(msg:any)=>{\n        console.log(msg)\n    })\n    checkUserState()\n    getRoomInfo()\n\n    //console.log(userRedux);\n  }, [])\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\">{username}</Menu.Item>\n          <Link to={{ pathname: '/dashboard' }}>\n            <Menu.Item key=\"2\">個人總覽</Menu.Item>\n          </Link>\n          <Link to={{ pathname: '/' }}>\n            <Menu.Item key=\"3\">首頁</Menu.Item>\n          </Link>\n          <Menu.Item key=\"4\" onClick={onLogout}>Logout</Menu.Item>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n          <Row>\n            <Col span={6}></Col>\n            <Col span={3}></Col>\n            <Col span={12}>\n              \n            </Col>\n            <Col span={3}></Col>\n          </Row>\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport 'antd/dist/antd.css'\nimport { Layout, Menu, Breadcrumb, Modal, Button, Input, Row, Col, Card, Tabs, Tag } from 'antd'\nimport { userBody, optionBody, questionBody, roomBody, userState } from '../types/typeObject'\nimport { DataTable } from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport { useAppSelector, useAppDispatch } from './../app/hooks'\nimport { selectUser, userLogin, getUser } from './../features/user/userSlice'\nimport { UserOutlined } from '@ant-design/icons'\nimport { NodeService } from '../service/nodeService'\nimport { store } from './../app/store'\nimport { Link } from 'react-router-dom'\n\nexport default function Dashboard() {\n  // const dispatch = useAppDispatch()\n  // //const user:userBody = useAppSelector(state => state.user);\n  // const user: userState = useAppSelector(selectUser)\n  //const userRedux = dispatch(getUser());\n  //const user:userBody = state.location.state.user;\n  const username = sessionStorage.getItem('username') ?? \"\";\n  const userid = sessionStorage.getItem('userid') ?? \"\";\n  const [allOwnerRooms, setAllOwnerRooms] = useState<Array<roomBody>>([])\n  const [selectRoom,setSelectRoom] = useState<roomBody>()\n  const { Header, Content, Footer } = Layout\n  const { TabPane } = Tabs\n\n  const nodeService = new NodeService()\n  async function getUserRoom() {\n    await nodeService.getAllOwnRooms(userid).then((e) => {setAllOwnerRooms(e); console.log(e)})\n  }\n  function checkUserState() {\n    if (username === \"\") {\n      window.location.pathname = '/login';\n    }\n  }\n  const roomTemplate = (roomInfo: roomBody, ind: number) => {\n    const tabHeader = `Q${ind}`\n    return (\n      <TabPane tab={tabHeader} key={ind}>\n        <h2>Question: {roomInfo.questions[0].question}</h2>\n        <h3>Answer:</h3>\n        {roomInfo.questions === undefined\n          ? ''\n          : roomInfo.questions[0].choices.map((e, i) => choiceTemplate(e, i))}\n      </TabPane>\n    )\n  }\n  const choiceTemplate = (choice: optionBody, ind: number) => {\n    return (\n      <div>\n        <h4>\n          {ind + 1}) {choice.option}\n        </h4>\n        <h5>Who choice this?</h5>\n        <div>{choice.selectedList.map((e) => selectorTemplate(e))}</div>\n      </div>\n    )\n  }\n  const selectorTemplate = (user: userBody) => {\n    return <Tag>{user.name}</Tag>\n  }\n  async function enterRoomControl(){\n    return \n  }\n  const onLogout = () => {\n    sessionStorage.clear();\n    console.log('Logout !');\n    window.location.pathname = '/login';\n  }\n  useEffect(() => {\n    console.log(username,userid)\n    checkUserState()\n    //console.log(userRedux);\n    getUserRoom()\n  }, [])\n  return (\n    <Layout>\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item key=\"1\">{username}</Menu.Item>\n          <Link to={{ pathname: '/dashboard' }}>\n            <Menu.Item key=\"2\">個人總覽</Menu.Item>\n          </Link>\n          <Link to={{ pathname: '/' }}>\n            <Menu.Item key=\"3\">首頁</Menu.Item>\n          </Link>\n          <Menu.Item key=\"4\" onClick={onLogout}>Logout</Menu.Item>\n        </Menu>\n      </Header>\n      <Content className=\"site-layout\" style={{ padding: '0 50px', marginTop: 64 }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 380 }}>\n          <Row>\n            <Col span={6}></Col>\n            <Col span={3}></Col>\n            <Col span={12}>\n              <DataTable value={allOwnerRooms} selectionMode=\"single\" selection={selectRoom} onSelectionChange={(e)=>(setSelectRoom(e.value))}>\n                <Column field=\"roomId\" header=\"房間 ID:\"></Column>\n                <Column field=\"roomName\" header=\"房間名稱:\"></Column>\n              </DataTable>\n            </Col>\n            <Col span={3}></Col>\n          </Row>\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Live Interact</Footer>\n    </Layout>\n  )\n}\n"],"sourceRoot":""}